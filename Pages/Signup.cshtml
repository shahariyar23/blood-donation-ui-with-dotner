@page
@model IndexModel
@{
    ViewBag.Title = "Sign up";
}

<style>
    body {
        background: linear-gradient(to right, #f8f9fa, #e0f7fa);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .form-container {
        max-width: 900px;
        margin: 50px auto;
        background-color: #ffffffdd;
        border-radius: 20px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        padding: 40px;
        transition: all 0.3s ease-in-out;
    }

    .form-container:hover {
        box-shadow: 0 0 30px rgba(0, 0, 0, 0.2);
    }

    .form-control,
    .form-select {
        border-radius: 10px;
        transition: border-color 0.3s;
    }

    .form-control:focus,
    .form-select:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }

    .btn-primary {
        background: linear-gradient(45deg, #0d6efd, #6610f2);
        border: none;
        border-radius: 12px;
        font-weight: 600;
        padding: 10px 20px;
    }

    .btn-primary:hover {
        background: linear-gradient(45deg, #6610f2, #0d6efd);
    }

    .form-check-label {
        user-select: none;
    }

    .form-title {
        text-align: center;
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 20px;
        color: #0d6efd;
    }

    .login-link {
        text-align: center;
        margin-top: 20px;
        color: #6c757d;
    }

    .login-link a {
        text-decoration: none;
        color: #0d6efd;
        font-weight: 500;
    }

    .login-link a:hover {
        text-decoration: underline;
    }
</style>

<form class="row g-3 needs-validation form-container" novalidate>
    <div class="form-title">User Registration</div>

    <input type="hidden" name="latitude" id="latitude">
    <input type="hidden" name="longitude" id="longitude">

    <div class="col-md-6">
        <label class="form-label">Full name</label>
        <input type="text" name="fullname" class="form-control" placeholder="Full name" required>
        <div class="valid-feedback">Looks good!</div>
    </div>
    <div class="col-md-6">
        <label class="form-label">Username</label>
        <input type="text" name="username" class="form-control" placeholder="Username" required>
        <div class="valid-feedback">Looks good!</div>
    </div>
    <div class="col-md-6">
        <label class="form-label">Password</label>
        <input type="password" name="password" class="form-control" placeholder="At least 6 characters" required>
        <div class="valid-feedback">Looks good!</div>
    </div>
    <div class="col-md-6">
        <label class="form-label">Email</label>
        <input type="email" name="email" class="form-control" placeholder="name@example.com" required>
        <div class="invalid-feedback">Please enter a valid email.</div>
    </div>
    <div class="col-md-6">
        <label class="form-label">Social Media Link</label>
        <input type="text" name="socialMedia" class="form-control" placeholder="www.facebook.com/username" required>
        <div class="invalid-feedback">Please provide a valid Social Media Link.</div>
    </div>
    <div class="col-md-6">
        <label class="form-label">Religion</label>
        <select name="religion" class="form-select" required>
            <option selected disabled value="">Choose your religion</option>
            <option>Islam</option>
            <option>Hinduism</option>
            <option>Buddhism</option>
            <option>Christianity</option>
        </select>
        <div class="invalid-feedback">Please select a valid religion.</div>
    </div>
    <div class="col-md-6">
        <label class="form-label">Gender</label>
        <select name="gender" class="form-select" required>
            <option selected disabled value="">Select your gender</option>
            <option>Male</option>
            <option>Female</option>
        </select>
        <div class="invalid-feedback">Please select a valid gender.</div>
    </div>
    <div class="col-md-6">
        <label class="form-label">Blood Group</label>
        <select name="bloodType" class="form-select" required>
            <option selected disabled value="">Choose your Blood Group</option>
            <option>A+</option>
            <option>AB+</option>
            <option>B+</option>
            <option>O+</option>
            <option>A-</option>
            <option>AB-</option>
            <option>B-</option>
            <option>O-</option>
        </select>
        <div class="invalid-feedback">Please select a valid group.</div>
    </div>
    <div class="col-md-6">
        <label class="form-label">Date of Birth</label>
        <input name="dateOfBirth" type="date" class="form-control" required>
        <div class="invalid-feedback">Please provide a valid date.</div>
    </div>
    <div class="col-md-6">
        <label class="form-label">Phone</label>
        <input name="phoneNumber" type="text" class="form-control" placeholder="017XXXXXXXX" required>
        <div class="invalid-feedback">Please provide a valid phone number.</div>
    </div>
    <div class="col-12">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" value="" id="invalidCheck" required>
            <label class="form-check-label" for="invalidCheck">
                Agree to terms and conditions
            </label>
            <div class="invalid-feedback">You must agree before submitting.</div>
        </div>
    </div>
    <div class="col-12">
        <button class="btn btn-primary w-100" type="submit">Register</button>
    </div>
    <div class="login-link">
        <p>Already have an account? <a href="/login">Login</a></p>
    </div>
</form>

@section Scripts {
    <script>
        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }

                        form.classList.add('was-validated')
                    }, false)
                })
        })()


        const form = document.querySelector("form");

        // Try to get location as soon as the page loads
        window.addEventListener("load", () => {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        // Store latitude and longitude in hidden inputs
                        document.getElementById("latitude").value = position.coords.latitude;
                        document.getElementById("longitude").value = position.coords.longitude;

                        // Log the values for debugging
                        console.log("Latitude:", position.coords.latitude);
                        console.log("Longitude:", position.coords.longitude);
                    },
                    (error) => {
                        console.warn("Location access denied or unavailable.");
                        console.error(error);
                    },
                    {
                        enableHighAccuracy: true, // Optional, improves location accuracy
                        timeout: 10000, // Set a timeout for the location request
                        maximumAge: 0 // Don't use cached location
                    }
                );
            } else {
                console.warn("Geolocation is not supported by this browser.");
            }
        });

        // On form submit, log form data including latitude and longitude
        form.addEventListener("submit", function (e) {
            e.preventDefault(); // Prevent actual form submission

            const formData = new FormData(form);
            const userData = Object.fromEntries(formData.entries());

            if (!Object.values(userData).some(value =>
                value === null || value === undefined || value === "")) {

                console.log(userData);

                fetch("https://localhost:7034/api/Auth/register", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(userData)
                })
                    .then(async (res) => {
                        const contentType = res.headers.get("content-type");

                        if (!res.ok) {
                            const errorText = await res.text(); // handle plain text error
                            throw new Error(errorText);
                        }

                        if (contentType && contentType.includes("application/json")) {
                            return res.json();
                        } else {
                            throw new Error("Unexpected response format.");
                        }
                    })
                    .then(data => {
                        if (data.success || data.statusCode === 201) {
                            alert(`✅ Registered!\nMessage: ${data.message}\nUsername: ${data.user.username}\nEmail: ${data.user.email}`);
                            window.location.href = "/";
                        } else {
                            alert(data.message || "Registration failed.");
                        }
                    })
                    .catch(err => {
                        console.error("Error:", err.message);
                        alert(`❌ ${err.message}`);
                    });

            } else {
                alert("⚠️ Please fill all required fields.");
            }
        });

    </script>
}
